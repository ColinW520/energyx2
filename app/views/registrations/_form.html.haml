= simple_form_for [@event, @registration], authenticity_token: true, html: { id: 'RegistrationForm' } do |f|
  - if @registration.errors.any?
    .row
      .col-sm-12
        #error_explanation
          %h2.text-danger
            = pluralize(@registration.errors.count, "error")
            prohibited this registration from being saved:
          %ul
            - @registration.errors.full_messages.each do |message|
              %li= message
          %strong If you are seeing this message, your card has NOT been charged yet.
  .row
    .col-sm-12
      .fieldset
        %legend
          Type
          %strong.text-danger{style: "font-size: 10px;"} Once paid, you cannot change this!
        %br
        - if @registration.persisted?
          %strong.text-danger= "Type Selected: #{@registration.subtype.titleize}"
        - else
          .form-group
            .form-check
              %label.form-check-label
                %input#TeamRadio.form-check-input{:checked => "checked", :name => "registration[subtype]", :type => "radio", :value => "team"}
                %strong{style: "font-size: 15px;"} Team:
                I want to register at least two people for
                %strong{style: "font-size: 15px;"} $100
            %br
            .form-group#TeamNameHolder
              = f.input :name, label: 'Team Name*', placeholder: 'What will your team name be?'
            %br
            .form-check
              %label.form-check-label
                %input#SoloRadio.form-check-input{:name => "registration[subtype]", :type => "radio", :value => "solo"}
                %strong{style: "font-size: 15px;"} Solo:
                I want to register just myself for
                %strong{style: "font-size: 15px;"} $50
  %br
  .row
    .col-sm-12
      .fieldset
        %legend
          Communication
          %span.text-danger{style: "font-size: 10px;"}
        .row
          .col-sm-12.col-md-6
            = f.input :email, as: :email, hint: '(for confirmations)', required: true
          .col-sm-12.col-md-6
            = f.input :phone, as: :tel, label: 'Mobile Phone', hint: '(for alerts)', required: true
  %br
  .row
    .col-sm-12
      .fieldset
        %legend
          People
          %span.text-danger{style: "font-size: 10px;"}
            (Max of 4)
          %small.text-success.pull-right#AddMembers
            = link_to_add_association '+ add', f, :registration_members, "data-association-insertion-node" => "tbody#members", :"data-association-insertion-method" => "append", class: 'btn btn-sm btn-success text-info'
        %table.table.table-bordered
          %thead
            %th Name
            %th Email
            %th Shirt
            %th
          %tbody#members
            = f.fields_for :registration_members do |member|
              = render 'registration_member_fields', f: member

  - unless @registration.persisted?
    %br
    .row
      .col-sm-12
        .fieldset
          %legend
            Payment
          .card
            .card-block
              .form-group
                %label{:for => "card-element"}
                  Input Your Card Details
                #card-element
                #card-errors
  %br
  %br
  .row
    .col-sm-12
      .form-group
        .actions
          .pull-right
            = f.hidden_field :event_id, value: @event.id
            - if @registration.persisted?
              = f.button :submit, 'Update', class: 'btn btn-md btn-outline-success text-info'
            - else
              = f.button :submit, 'Register & Pay', id: 'stripe_button', class: 'btn btn-success btn-md text-info'
          = link_to event_path(@event), class: 'btn btn-sm btn-warning' do
            %i.fa.fa-arrow-left
            Cancel

%script{:src => "https://js.stripe.com/v3/"}
:coffeescript
  check_to_hide_or_show_add_link = ->
    if $('#members .nested-fields').length == 4
      $('#AddMembers a').hide()
    else
      $('#AddMembers a').show()
    return

  $ ->
    check_to_hide_or_show_add_link()

  $('#members').on 'cocoon:after-insert', ->
    check_to_hide_or_show_add_link()

  $('#members').on 'cocoon:after-remove', ->
    check_to_hide_or_show_add_link()

  $('.form-check-input').change ->
    if $('#SoloRadio').is(':checked')
      $('#TeamNameHolder').hide()
      $('input#registration_name').prop 'required', false
    else
      $('#TeamNameHolder').show()
      $('input#registration_name').prop 'required', true

  stripeTokenHandler = (token) ->
    # Insert the token ID into the form so it gets submitted to the server
    form = document.getElementById('RegistrationForm')
    tokenHiddenInput = document.createElement('input')
    tokenHiddenInput.setAttribute 'type', 'hidden'
    tokenHiddenInput.setAttribute 'name', 'stripe_token'
    tokenHiddenInput.setAttribute 'value', token.id
    form.appendChild tokenHiddenInput
    # Submit the form. This is the one that will have the token on it.
    form.submit()
    return
  # Create a Stripe client
  stripe = Stripe(gon.stripe_publishable_key)
  # Create an instance of Elements
  elements = stripe.elements()
  # Custom styling can be passed to options when creating an Element.
  # (Note that this demo uses a wider set of styles than the guide below.)
  style =
    base:
      color: '#32325d'
      lineHeight: '24px'
      fontFamily: 'Muli, Helvetica, sans-serif'
      fontSmoothing: 'antialiased'
      fontSize: '16px'
      '::placeholder': color: '#aab7c4'
    invalid:
      color: '#fa755a'
      iconColor: '#fa755a'
  # Create an instance of the card Element
  card = elements.create('card', style: style)
  # Add an instance of the card Element into the `card-element` <div>
  card.mount '#card-element'
  # Handle real-time validation errors from the card Element.
  card.addEventListener 'change', (event) ->
    displayError = document.getElementById('card-errors')
    if event.error
      displayError.textContent = event.error.message
    else
      displayError.textContent = ''
    return
  # Handle form submission
  form = document.getElementById('RegistrationForm')
  form.addEventListener 'submit', (event) ->
    event.preventDefault()
    # PREVENT DOUBLE CLICKING
    stripe.createToken(card).then (result) ->
      if result.error
        # Inform the user if there was an error
        errorElement = document.getElementById('card-errors')
        errorElement.textContent = result.error.message
      else
        # Send the token to your server
        stripeTokenHandler result.token
      return
    return
