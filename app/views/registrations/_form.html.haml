= simple_form_for [@event, @registration], authenticity_token: true, html: { id: 'RegistrationForm' } do |f|
  - if @registration.errors.any?
    .row
      .col-sm-12
        #error_explanation
          %h2.text-danger
            = pluralize(@registration.errors.count, "error")
            prohibited this registration from being saved:
          %ul
            - @registration.errors.full_messages.each do |message|
              %li= message
          %strong If you are seeing this message, your card has NOT been charged yet.
  %br
  .row
    .col-sm-12
      .fieldset
        %legend
          Basics
          %span.text-danger{style: "font-size: 10px;"}
        .row
          .col-sm-12.col-md-6
            = f.input :name, label: "Competitor's Name", required: true
          .col-sm-12.col-md-6
            = f.input :email, as: :email, required: true
          .col-sm-12.col-md-6
            = f.input :phone, as: :tel, label: 'Mobile Phone', required: true
          - if @event.is_offering_shirt?
            .col-sm-12.col-md-6
              = f.input :primary_shirt_size, label: 'Shirt Size', as: :select, collection: ['x-small', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl'], include_blank: false
          - if @event.waves.any?
            .col-sm-12.col-md-6
              = f.association :event_stage, collection: @event.waves.available, label: 'Select a Starting Wave', include_blank: false
          / TODO: add support for teams
          -# - if @event.teams.any?
          -#   .col-sm-12.col-md-6
          -#     = f.association :event_team, collection: @event.teams, label: 'On a Team?'
  .row
    .col-sm-12
      .fieldset
        %legend
          Payment Details
        - if @registration.persisted?
          = render 'payment_details', charge: @registration.retrieve_stripe_charge
        - else
          .card.card-outline-success
            .card-block
              .form-group
                %label{:for => "card-element"}
                  Input Your Card Details
                #card-element
                #card-errors
  %br
  %br
  .row
    .col-sm-12
      .form-group
        - if @registration.persisted?
          .text-center
            %p.text-warning
              Don't worry, your card will
              %strong NOT
              be charged again.
        .actions
          .pull-right
            = f.hidden_field :event_id, value: @event.id
            - if @registration.persisted?
              = f.button :submit, 'Update', class: 'btn btn-md btn-success text-info'
            - else
              = f.button :submit, 'Register & Pay', id: 'stripe_button', class: 'btn btn-success btn-md text-info'

%script{:src => "https://js.stripe.com/v3/"}
:coffeescript
  stripeTokenHandler = (token) ->
    # Insert the token ID into the form so it gets submitted to the server
    form = document.getElementById('RegistrationForm')
    tokenHiddenInput = document.createElement('input')
    tokenHiddenInput.setAttribute 'type', 'hidden'
    tokenHiddenInput.setAttribute 'name', 'stripe_token'
    tokenHiddenInput.setAttribute 'value', token.id
    form.appendChild tokenHiddenInput
    # Submit the form. This is the one that will have the token on it.
    form.submit()
    return
  # Create a Stripe client
  stripe = Stripe(gon.stripe_publishable_key)
  # Create an instance of Elements
  elements = stripe.elements()
  # Custom styling can be passed to options when creating an Element.
  # (Note that this demo uses a wider set of styles than the guide below.)
  style =
    base:
      color: '#32325d'
      lineHeight: '24px'
      fontFamily: 'Muli, Helvetica, sans-serif'
      fontSmoothing: 'antialiased'
      fontSize: '16px'
      '::placeholder': color: '#aab7c4'
    invalid:
      color: '#fa755a'
      iconColor: '#fa755a'
  # Create an instance of the card Element
  card = elements.create('card', style: style)
  # Add an instance of the card Element into the `card-element` <div>
  card.mount '#card-element'
  # Handle real-time validation errors from the card Element.
  card.addEventListener 'change', (event) ->
    displayError = document.getElementById('card-errors')
    if event.error
      displayError.textContent = event.error.message
    else
      displayError.textContent = ''
    return
  # Handle form submission
  form = document.getElementById('RegistrationForm')
  form.addEventListener 'submit', (event) ->
    event.preventDefault()
    # PREVENT DOUBLE CLICKING
    stripe.createToken(card).then (result) ->
      if result.error
        # Inform the user if there was an error
        errorElement = document.getElementById('card-errors')
        errorElement.textContent = result.error.message
      else
        # Send the token to your server
        stripeTokenHandler result.token
      return
    return
