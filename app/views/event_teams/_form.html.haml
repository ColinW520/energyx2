= simple_form_for [@event, @event_team], authenticity_token: true, html: { id: 'EventTeamForm' } do |f|
  - if @event_team.errors.any?
    .row
      .col-sm-12
        #error_explanation
          %h2.text-danger
            = pluralize(@event_team.errors.count, "error")
            prohibited this registration from being saved:
          %ul
            - @event_team.errors.full_messages.each do |message|
              %li= message
          - unless @event_team.persisted?
            %strong Your card has NOT been charged.
  %br
  .row
    .col-sm-12
      .fieldset
        = render "team_fields", f: f
        = render "add_members_section", f: f

  .row{style: "margin-top: 10%"}
    .col-sm-12
      .fieldset
        - if @event_team.persisted?
          = render 'payment_details', charge: @event_team.retrieve_stripe_charge
        - else
          .card.card-outline-success
            .card-block
              %h5.text-info
                %strong Price:
                = number_to_currency @event.team_price_in_cents / 100, precision: 2
              %br
              .form-group
                %label{:for => "card-element"}
                  Input Your Card Details
                #card-element
                #card-errors
  %br
  %br
  .row
    .col-sm-12
      .form-group
        - if @event_team.has_paid?
          .text-center
            %p.text-warning
              Don't worry, your card will
              %strong NOT
              be charged again.
        .actions
          .pull-right
            = f.hidden_field :event_id, value: @event.id
            - if @event_team.persisted?
              = f.button :submit, 'Update', class: 'btn btn-md btn-success text-info'
            - else
              = f.button :submit, "Register & Pay #{number_to_currency(@event.team_price_in_cents / 100, precision: 2)}", id: 'stripe_button', class: 'btn btn-success btn-md text-info'

%script{:src => "https://js.stripe.com/v3/"}
:coffeescript
  stripeTokenHandler = (token) ->
    # Insert the token ID into the form so it gets submitted to the server
    form = document.getElementById('EventTeamForm')
    tokenHiddenInput = document.createElement('input')
    tokenHiddenInput.setAttribute 'type', 'hidden'
    tokenHiddenInput.setAttribute 'name', 'stripe_token'
    tokenHiddenInput.setAttribute 'value', token.id
    form.appendChild tokenHiddenInput
    # Submit the form. This is the one that will have the token on it.
    form.submit()

  # Create a Stripe client
  stripe = Stripe(gon.stripe_publishable_key)
  # Create an instance of Elements
  elements = stripe.elements()
  # Custom styling can be passed to options when creating an Element.
  # (Note that this demo uses a wider set of styles than the guide below.)
  style =
    base:
      color: '#32325d'
      fontFamily: 'Muli, Helvetica, sans-serif'
      fontSmoothing: 'antialiased'
      fontSize: '16px'
      '::placeholder': color: '#aab7c4'
    invalid:
      color: '#fa755a'
      iconColor: '#fa755a'
  # Create an instance of the card Element
  card = elements.create('card', style: style)
  # Add an instance of the card Element into the `card-element` <div>
  card.mount '#card-element'
  # Handle real-time validation errors from the card Element.
  card.addEventListener 'change', (event) ->
    displayError = document.getElementById('card-errors')
    if event.error
      displayError.textContent = event.error.message
    else
      $("#stripe_button").removeAttr('disabled')
      displayError.textContent = ''

  # Handle form submission
  form = document.getElementById('EventTeamForm')
  form.addEventListener 'submit', (event) ->
    event.preventDefault()
    # PREVENT DOUBLE CLICKING
    stripe.createToken(card).then (result) ->
      if result.error
        # Inform the user if there was an error
        errorElement = document.getElementById('card-errors')
        errorElement.textContent = result.error.message
      else
        # Send the token to your server
        stripeTokenHandler result.token
